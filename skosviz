#!/usr/bin/python

# Copyright (C) 2011 Reece H. Dunn
#
# This file is part of skosviz.
#
# skosviz is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skosviz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skosviz.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os

from xml.dom import minidom

class RdfNamespace:
	def __init__(self, ns):
		self.ns = ns

	def __getattr__(self, name):
		return (self.ns, name)

rdf  = RdfNamespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
dc   = RdfNamespace('http://purl.org/dc/elements/1.1/')
skos = RdfNamespace('http://www.w3.org/2004/02/skos/core#')

# SKOS Object Model

class Concept:
	def __init__(self, pref, alt, narrower):
		self.pref     = pref
		self.alt      = alt
		self.narrower = narrower

class ConceptScheme:
	def __init__(self, name, top_concepts):
		self.name         = name
		self.top_concepts = top_concepts

class SkosLibrary:
	def __init__(self):
		self.concepts = {}
		self.schemes  = {}

# RDF/XML+SKOS Parser

def text(parent):
	for node in parent.childNodes:
		if node.nodeType == node.TEXT_NODE:
			return node.nodeValue
	return ''

def select(parent, ref):
	ret = []
	ns, name = ref
	for node in parent.childNodes:
		if node.nodeType == node.ELEMENT_NODE and node.localName == name and node.namespaceURI == ns:
			ret.append(node)
	return ret

def attr(parent, ref):
	ns, name = ref
	return parent.getAttributeNS(ns, name)

def parseRdfXml(filename):
	ret  = SkosLibrary()
	dom  = minidom.parse(filename).documentElement
	for c in select(dom, skos.Concept):
		pref     = text(select(c, skos.prefLabel)[0])
		alt      = [text(a) for a in select(c, skos.altLabel)]
		ref      = '#%s' % attr(c, rdf.ID)
		narrower = [attr(a, rdf.resource) for a in select(c, skos.narrower)]
		ret.concepts[ref] = Concept(pref, alt, narrower)
	for c in select(dom, skos.ConceptScheme):
		ref  = '#%s' % attr(c, rdf.ID)
		name = text(select(c, dc.title)[0])
		top  = [attr(a, rdf.resource) for a in select(c, skos.hasTopConcept)]
		ret.schemes[ref] = ConceptScheme(name, top)
	return ret

# Heirarchical Tree

def indent(s, level=0):
	for i in range(0, level):
		sys.stdout.write('... ')
	sys.stdout.write('%s\n' % s)

def tree_viz_concept(skos, c, level):
	if len(c.alt) == 0:
		indent('%s' % c.pref, level)
	else:
		indent('%s [%s]' % (c.pref, ', '.join(c.alt)), level)
	for n in c.narrower:
		tree_viz_concept(skos, skos.concepts[n], level+1)

def tree_viz(skos):
	for cs in skos.schemes.values():
		indent(cs.name)
		for c in cs.top_concepts:
			tree_viz_concept(skos, skos.concepts[c], 1)

# Main Program

try:
	filename = sys.argv[1]
except IndexError:
	print 'usage: skosviz skos-file'
	sys.exit(1)

data = parseRdfXml(filename)
tree_viz(data)
