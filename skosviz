#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2011-2016, 2024 Reece H. Dunn
#
# This file is part of skosviz.
#
# skosviz is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skosviz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skosviz.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import codecs

import rdflib

rdf  = rdflib.Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
dc   = rdflib.Namespace('http://purl.org/dc/elements/1.1/')
dct  = rdflib.Namespace('http://purl.org/dc/terms/')
skos = rdflib.Namespace('http://www.w3.org/2004/02/skos/core#')

def parse_rdf(filename, input_format=None):
	fmt = rdflib.util.guess_format(filename)
	if not fmt:
		with open(filename, 'rb') as f:
			srcdata = f.read()
		if srcdata.startswith(b'#') or srcdata.startswith(b'@prefix'):
			fmt = 'turtle' # RDF/Turtle
		elif srcdata.startswith(b'<!--') or srcdata.startswith(b'<?xml'):
			fmt = 'xml' # RDF/XML
		else:
			fmt = 'nt' # N-Triples

	graph = rdflib.Graph()
	graph.parse(filename, format=fmt)
	return graph

# SKOS Object Model

class ConceptNode:
	def __init__(self, nodetype, ref):
		self.nodetype  = nodetype
		self.ref       = ref
		self.name      = None
		self.alt       = []
		self.children  = []
		self.parent    = None
		self.relations = []

	def add_relation(self, rel, item):
		self.relations.append((rel, item))

	def __str__(self):
		if len(self.alt) == 0:
			return self.name
		else:
			return '%s [%s]' % (self.name, ', '.join(sorted(self.alt)))

class SkosLibrary:
	def __init__(self):
		self.refs = {}

def parse_skos(ret, filename):
	graph = parse_rdf(filename)

	for c, _, _ in graph.triples((None, rdf.type, skos.Concept)):
		ref = str(c)
		node = ret.refs[ref] = ConceptNode('Concept', ref)
		for _, p, o in graph.triples((c, None, None)):
			if p == skos.prefLabel:
				if not node.name:
					node.name = str(o)
			elif p in [skos.altLabel, skos.notation]:
				node.alt.append(str(o))
			elif p in [skos.narrower, skos.narrowerTransitive]:
				node.children.append(str(o))
			elif p in [skos.broader, skos.broarderTransitive]:
				node.add_relation('broader', str(o))
			elif p == skos.exactMatch:
				node.add_relation('exactMatch', str(o))
			elif p == skos.closeMatch:
				node.add_relation('closeMatch', str(o))
			elif p == skos.broadMatch:
				node.add_relation('broadMatch', str(o))
			elif p == skos.narrowMatch:
				node.add_relation('narrowMatch', str(o))
			elif p in [skos.related, skos.relatedMatch]:
				node.add_relation('related', str(o))

	for c, _, _ in graph.triples((None, rdf.type, skos.ConceptScheme)):
		ref = str(c)
		node = ret.refs[ref] = ConceptNode('ConceptScheme', ref)
		for _, p, o in graph.triples((c, None, None)):
			if p in [dc.title, dct.title]:
				if not node.name:
					node.name = str(o)
			elif p == skos.hasTopConcept:
				node.children.append(str(o))

	for ref, c in ret.refs.items():
		for n in c.children:
			ret.refs[n].parent = ref

# Text Formatter

def tree_viz_node(c, padding, options, end):
	if end:
		branch = u'└─'
	else:
		branch = u'├─'
	options['output'].write(u'%s%s%s\n' % (padding, branch, c))

def tree_viz_impl(skos, c, padding, options, end=False):
	tree_viz_node(c, padding[:-1], options, end=end)
	padding = padding + ' '
	for i, child in enumerate(sorted(c.children, key=lambda c: skos.refs[c].name)):
		n = skos.refs[child]
		if len(n.children) != 0:
			if i == len(c.children)-1:
				tree_viz_impl(skos, n, padding + ' ', options, end=True)
			else:
				tree_viz_impl(skos, n, padding + u'│', options)
		else:
			tree_viz_node(n, padding, options, end=i == len(c.children)-1)

def tree_viz(skos, roots, options):
	for i, c in enumerate(sorted(roots, key=lambda c: c.name)):
		tree_viz_impl(skos, c, ' ', options, end=i == len(roots)-1)

# Dot Formatter

colours = {
	'related': 'red',
	'exactMatch': 'blue',
	'closeMatch': 'teal',
	'broader': 'orange',
	'broadMatch': 'forestgreen',
	'narrowMatch': 'deeppink',
}

def get_relation_name(skos, c):
	ref = skos.refs.get(c[1], None)
	if ref:
		return ref.name
	return ''

def dot_viz_impl(skos, c, options):
	if c.nodetype == 'ConceptScheme':
		options['output'].write('\t"%s" [label="%s"]\n' % (c.ref, c.name.replace(' ', '\\n')))
	else:
		options['output'].write('\t"%s" [label="%s", shape=none]\n' % (c.ref, c.name.replace(' ', '\\n')))
	for i, child in enumerate(sorted(c.children, key=lambda c: skos.refs[c].name)):
		n = skos.refs[child]
		options['output'].write('\t"%s" -> "%s"\n' % (c.ref, n.ref))
	for i, (t, child) in enumerate(sorted(c.relations, key=lambda c: get_relation_name(skos, c))):
		n = skos.refs.get(child, None)
		if n:
			options['output'].write('\t"%s" -> "%s" [color=%s]\n' % (c.ref, n.ref, colours[t]))

def dot_viz(skos, roots, options):
	options['output'].write('digraph "SKOS Visualisation" {\n')
	for c in sorted(skos.refs.values(), key=lambda c: c.name):
		dot_viz_impl(skos, c, options)
	options['output'].write('}\n')

# Main Program

options = {
	'output':   sys.stdout,
	'filename': [],
	'format':   'text',
}

formatters = {
	'text': tree_viz,
	'dot':  dot_viz,
}

def usage():
	sys.stdout.write("""usage: skosviz OPTIONS skos-file..
where OPTIONS are:
    -o FILE, --output FILE     save the visualisation to FILE (or - for stdout).
    -f FORMAT, --format FORMAT the file format for the output:
        text   utf-8 encoded text [default]
        dot    graphviz graph source
""")
	sys.exit(1)

def cleanup(options):
	if options['output'] != sys.stdout:
		options['output'].close()

try:
	opt = None
	for arg in sys.argv[1:]:
		if not opt:
			if arg in ['-o', '--output']:
				opt = 'output'
			elif arg in ['-f', '--format']:
				opt = 'format'
			else:
				if arg.startswith('-'):
					usage()
				options['filename'].append(arg)
		else:
			if opt == 'output':
				if arg != '-':
					options[opt] = codecs.open(arg, 'w', 'utf-8')
			elif opt == 'format':
				if not arg in formatters.keys():
					usage()
				options[opt] = arg
			else:
				options[opt] = arg
			opt = None

	if len(options['filename']) == 0:
		usage()

	data = SkosLibrary()
	for filename in options['filename']:
		parse_skos(data, filename)
	roots = []
	for c in sorted(data.refs.values(), key=lambda c: c.name):
		if not c.parent:
			roots.append(c)
	formatters[options['format']](data, roots, options)
except:
	cleanup(options)
	raise
finally:
	cleanup(options)
